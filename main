local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Phynomie/growagarden/main/Library"))()
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")

local Main = library:CreateWindow("Grow a garden script (Creds to Phy)","Crimson")

local tab = Main:CreateTab("Exploits")
local tab2 = Main:CreateTab("Automation")
local tab3 = Main:CreateTab("Misc")

-- Farm protection system
local savedPrompts = {}
local playerFarm = nil

local function findPlayerFarm()
    local username = LocalPlayer.Name
    local farms = workspace:FindFirstChild("Farm")
    
    if not farms then
        warn("Farm system not found in workspace")
        return nil
    end

    for _, farmFolder in ipairs(farms:GetDescendants()) do
        if farmFolder.Name == "Owner" and farmFolder:IsA("StringValue") and farmFolder.Value == username then
            print("Found Your Farm! " .. username)
            return farmFolder.Parent.Parent.Parent -- Adjust path based on actual hierarchy
        end
    end
    
    warn("Could not find farm belonging to: " .. username)
    return nil
end

local function managePrompts(enable)
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return end
    end

    for _, prompt in ipairs(playerFarm:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") then
            if enable then
                -- Store original state if not already stored
                if not savedPrompts[prompt] then
                    savedPrompts[prompt] = {
                        Enabled = prompt.Enabled,
                        HoldDuration = prompt.HoldDuration,
                        ActionText = prompt.ActionText
                    }
                end
                -- Disable the prompt
                prompt.Enabled = false
                prompt.HoldDuration = math.huge
                prompt.ActionText = "Disabled"
            else
                -- Restore original state if we have it
                if savedPrompts[prompt] then
                    prompt.Enabled = savedPrompts[prompt].Enabled
                    prompt.HoldDuration = savedPrompts[prompt].HoldDuration
                    prompt.ActionText = savedPrompts[prompt].ActionText
                end
            end
        end
    end
end

local function simulateClick(x, y)
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
end

local function sendNotification(title, text, duration, Icon)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
        Icon = icon or "rbxassetid://6726579484"
    })
end

local function AutoBuyAll()
    -- Check if player has enough sheckles
    if LocalPlayer.leaderstats.Sheckles.Value < 1000000000 then
        sendNotification("Auto-Buy", "Need 1B+ sheckles to use this feature!", 3)
        return false
    end

    local boughtAnything = false
    
    -- Define all shops and their respective data
    local shops = {
        {
            name = "Seed_Shop",
            frameName = "Seed_Shop",
            eventName = "BuySeedStock",
            itemType = "seeds",
            notificationPrefix = "🌱 Bought seeds: "
        },
        {
            name = "Gear_Shop",
            frameName = "Gear_Shop",
            eventName = "BuyGearStock",
            itemType = "gears",
            notificationPrefix = "⚙️ Bought gear: "
        },
        {
            name = "PetShop_UI",
            frameName = "PetShop_UI",
            eventName = "BuyPetEgg",
            itemType = "eggs",
            notificationPrefix = "🥚 Bought eggs: "
        }
    }

    -- Process each shop
    for _, shop in ipairs(shops) do
        local shopGui = LocalPlayer.PlayerGui:FindFirstChild(shop.name)
        if not shopGui then continue end

        local scrollingFrame = shopGui.Frame:FindFirstChildOfClass("ScrollingFrame")
        if not scrollingFrame then continue end

        -- Process each item in the shop
        for _, frame in ipairs(scrollingFrame:GetChildren()) do
            if not string.find(frame.Name, "_Padding") and frame:FindFirstChild("Main_Frame") then
                local mainFrame = frame.Main_Frame
                local stockText = mainFrame:FindFirstChild("Stock_Text")
                
                if stockText and stockText.Text ~= "X0 Stock" then
                    local stockNum = tonumber(string.match(stockText.Text, "X(%d+)"))
                    if stockNum and stockNum > 0 then
                        -- Get the buy event
                        local buyEvent = ReplicatedStorage:FindFirstChild("GameEvents"):FindFirstChild(shop.eventName)
                        if not buyEvent then continue end

                        -- Make purchases
                        for i = 1, stockNum do
                            buyEvent:FireServer(frame.Name)
                            task.wait(0.05) -- Reduced delay for faster buying
                        end

                        sendNotification(
                            "Auto-Buy", 
                            shop.notificationPrefix..frame.Name.." x"..stockNum, 
                            2
                        )
                        boughtAnything = true
                    end
                end
            end
        end
    end

    return boughtAnything
end

-- Improved auto-buy loop
local autoBuyActive = false
local buyLoop = nil

local function stopBuyLoop()
    if buyLoop then
        coroutine.close(buyLoop)
        buyLoop = nil
    end
    autoBuyActive = false
    sendNotification("Auto-Buy", "Stopped automatic purchases", 3)
end

local function startBuyLoop()
    buyLoop = coroutine.create(function()
        while autoBuyActive do
            local boughtSomething = AutoBuyAll()
            -- Dynamic delay - shorter if items were bought, longer if not
            task.wait(boughtSomething and 3 or 10)
        end
    end)
    coroutine.resume(buyLoop)
    sendNotification("Auto-Buy", "Started automatic purchases", 3)
end

tab:CreateToggle("Anti Collect Fruits", function(a)
    if a then
        managePrompts(true)
    else
        managePrompts(false)
    end
end)

tab3:CreateButton("Sell All Fruits", function()
    simulateClick(804, 106)
    task.wait(0.2)
    fireproximityprompt(workspace.NPCS.Steven.HumanoidRootPart.ProximityPrompt)
    task.wait(2)
    simulateClick(724, 366)
end)

tab2:CreateToggle("Auto Buy Seed/Gear/Egg", function(state)
    autoBuyActive = state
    if state then
        stopBuyLoop() -- Ensure no duplicate loops
        startBuyLoop()
    else
        stopBuyLoop()
    end
end)

tab2:CreateToggle("Auto Dinosaur Egg", function(a)
    print(a and "Auto Dino Egg: ON" or "Auto Dino Egg: OFF")
end)

tab3:CreateButton("Sprinker Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Phynomie/tg/refs/heads/main/script.lua"))()
end)

task.spawn(function()
    playerFarm = findPlayerFarm()
end)

tab:Show()
