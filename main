local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Phynomie/growagarden/main/Library"))()
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local Main = library:CreateWindow("Grow a garden script (Creds to Phy)","Crimson")

local tab = Main:CreateTab("Exploits")
local tab2 = Main:CreateTab("Automation")
local tab3 = Main:CreateTab("Misc")

local savedPrompts = {}
local playerFarm = nil

local function findPlayerFarm()
    local username = LocalPlayer.Name
    local farms = workspace:FindFirstChild("Farm")
    
    if not farms then
        warn("Farm system not found in workspace")
        return nil
    end

    for _, farmFolder in ipairs(farms:GetDescendants()) do
        if farmFolder.Name == "Owner" and farmFolder:IsA("StringValue") and farmFolder.Value == username then
            print("Found Your Farm! " .. username)
            return farmFolder.Parent.Parent.Parent 
        end
    end
    
    warn("Could not find farm belonging to: " .. username)
    return nil
end

local function managePrompts(enable)
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return end
    end

    for _, prompt in ipairs(playerFarm:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") then
            if enable then
                if not savedPrompts[prompt] then
                    savedPrompts[prompt] = {
                        Enabled = prompt.Enabled,
                        HoldDuration = prompt.HoldDuration,
                        ActionText = prompt.ActionText
                    }
                end
                prompt.Enabled = false
                prompt.HoldDuration = math.huge
                prompt.ActionText = "Disabled"
            else
                if savedPrompts[prompt] then
                    prompt.Enabled = savedPrompts[prompt].Enabled
                    prompt.HoldDuration = savedPrompts[prompt].HoldDuration
                    prompt.ActionText = savedPrompts[prompt].ActionText
                end
            end
        end
    end
end

local function simulateClick(x, y)
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
end

local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
        Icon = "rbxassetid://6726579484"
    })
end

local function autoBuySeeds()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local seedShop = LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
    if not seedShop then
        sendNotification("GAG Script", "Seed shop not open!")
        return
    end

    local scrollingFrame = seedShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." seeds!")
                end
            end
        end
    end
end

local function autoBuyGears()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local gearShop = LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
    if not gearShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = gearShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." gears!")
                end
            end
        end
    end
end

local function autoBuyEggs()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local eggShop = LocalPlayer.PlayerGui:FindFirstChild("PetShop_UI")
    if not eggShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = eggShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyPetEgg"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." gears!")
                end
            end
        end
    end
end

tab:CreateToggle("Anti Collect Fruits", function(a)
    if a then
        managePrompts(true)
    else
        managePrompts(false)
    end
end)

tab3:CreateButton("Sell All Fruits", function()
    simulateClick(804, 106)
    task.wait(0.2)
    fireproximityprompt(workspace.NPCS.Steven.HumanoidRootPart.ProximityPrompt)
    task.wait(2)
    simulateClick(724, 366)
end)

local autoBuyActive = false
local buyLoop = nil

local function stopBuyLoop()
    if buyLoop then
        coroutine.close(buyLoop)
        buyLoop = nil
    end
    autoBuyActive = false
end

local countdownGui
local countdownFrame
local countdownTimerText
local countdownProgressFill

-- Function to create the countdown UI
local function createCountdownUI()
    -- Destroy existing UI if it exists
    if countdownGui then
        countdownGui:Destroy()
    end

    -- Create new UI
    countdownGui = Instance.new("ScreenGui")
    countdownGui.Name = "AutoBuyCountdown"
    countdownGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    countdownFrame = Instance.new("Frame")
    countdownFrame.Size = UDim2.new(0, 200, 0, 50)
    countdownFrame.Position = UDim2.new(0.5, -100, 0.05, 0)
    countdownFrame.AnchorPoint = Vector2.new(0.5, 0)
    countdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    countdownFrame.BackgroundTransparency = 0.5
    countdownFrame.BorderSizePixel = 0
    countdownFrame.Visible = false
    countdownFrame.Parent = countdownGui

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0.4, 0)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Next Auto-Buy In:"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.Gotham
    title.TextSize = 14
    title.Parent = countdownFrame

    countdownTimerText = Instance.new("TextLabel")
    countdownTimerText.Size = UDim2.new(1, 0, 0.6, 0)
    countdownTimerText.Position = UDim2.new(0, 0, 0.4, 0)
    countdownTimerText.BackgroundTransparency = 1
    countdownTimerText.Text = "60s"
    countdownTimerText.TextColor3 = Color3.fromRGB(255, 255, 255)
    countdownTimerText.Font = Enum.Font.GothamBold
    countdownTimerText.TextSize = 18
    countdownTimerText.Parent = countdownFrame

    local progressBar = Instance.new("Frame")
    progressBar.Size = UDim2.new(1, 0, 0, 3)
    progressBar.Position = UDim2.new(0, 0, 1, -3)
    progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    progressBar.BorderSizePixel = 0
    progressBar.Parent = countdownFrame

    countdownProgressFill = Instance.new("Frame")
    countdownProgressFill.Size = UDim2.new(1, 0, 1, 0)
    countdownProgressFill.Position = UDim2.new(0, 0, 0, 0)
    countdownProgressFill.BackgroundColor3 = Color3.fromRGB(220, 20, 60) -- Crimson
    countdownProgressFill.BorderSizePixel = 0
    countdownProgressFill.Parent = progressBar
end

-- Function to clean up the countdown UI
local function cleanupCountdownUI()
    if countdownGui then
        countdownGui:Destroy()
        countdownGui = nil
        countdownFrame = nil
        countdownTimerText = nil
        countdownProgressFill = nil
    end
end

local function startBuyLoop()
    createCountdownUI()
    
    buyLoop = coroutine.create(function()
        while autoBuyActive do
            -- Show the countdown
            countdownFrame.Visible = true
            
            -- Run the purchases
            autoBuySeeds()
            autoBuyGears()
            autoBuyEggs()
            
            -- Countdown with visual update
            for i = 60, 1, -1 do
                if not autoBuyActive then break end
                
                -- Update display
                countdownTimerText.Text = i.."s"
                countdownProgressFill.Size = UDim2.new(i/60, 0, 1, 0)
                
                -- Smooth animation for progress bar
                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(countdownProgressFill, tweenInfo, {Size = UDim2.new((i-1)/60, 0, 1, 0)})
                tween:Play()
                
                task.wait(1)
            end
        end
        
        -- Clean up when loop ends
        cleanupCountdownUI()
    end)
    coroutine.resume(buyLoop)
end

tab2:CreateToggle("Auto Buy Seed/Gear/Egg", function(a)
    autoBuyActive = a
    
    if a then
        if not buyLoop then
            startBuyLoop()
        end
    else
        stopBuyLoop()
        cleanupCountdownUI()
    end
end)

tab2:CreateToggle("Auto Dinosaur Egg", function(a)
    print(a and "Auto Dino Egg: ON" or "Auto Dino Egg: OFF")
end)

tab3:CreateButton("Sprinker Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Phynomie/tg/refs/heads/main/script.lua"))()
end)

tab:Show()
