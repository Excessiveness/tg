local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Phynomie/growagarden/main/Library"))()
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")

local Main = library:CreateWindow("Grow a garden script (Creds to Phy)", "Crimson")

local tab = Main:CreateTab("Exploits")
local tab2 = Main:CreateTab("Automation")
local tab3 = Main:CreateTab("Misc")

-- Farm protection system
local savedPrompts = {}
local playerFarm = nil

local function findPlayerFarm()
    local username = LocalPlayer.Name
    local farms = workspace:FindFirstChild("Farm")
    
    if not farms then
        warn("Farm system not found in workspace")
        return nil
    end

    for _, farmFolder in ipairs(farms:GetDescendants()) do
        if farmFolder.Name == "Owner" and farmFolder:IsA("StringValue") and farmFolder.Value == username then
            print("Found Your Farm! " .. username)
            return farmFolder.Parent.Parent.Parent
        end
    end
    
    warn("Could not find farm belonging to: " .. username)
    return nil
end

local function managePrompts(enable)
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return end
    end

    for _, prompt in ipairs(playerFarm:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") then
            if enable then
                if not savedPrompts[prompt] then
                    savedPrompts[prompt] = {
                        Enabled = prompt.Enabled,
                        HoldDuration = prompt.HoldDuration,
                        ActionText = prompt.ActionText
                    }
                end
                prompt.Enabled = false
                prompt.HoldDuration = math.huge
                prompt.ActionText = "Disabled"
            else
                if savedPrompts[prompt] then
                    prompt.Enabled = savedPrompts[prompt].Enabled
                    prompt.HoldDuration = savedPrompts[prompt].HoldDuration
                    prompt.ActionText = savedPrompts[prompt].ActionText
                end
            end
        end
    end
end

local function simulateClick(x, y)
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
end

local function sendNotification(title, text, duration, icon)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
        Icon = icon or "rbxassetid://6726579484"
    })
end

local function autoBuyFromShop(shopName, buyEventName, itemType)
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then
        sendNotification("GAG Script", "You need 1B+ sheckles to auto-buy!")
        return false
    end

    local shopGui = LocalPlayer.PlayerGui:FindFirstChild(shopName)
    if not shopGui then
        warn(shopName.." GUI not found")
        return false
    end

    local scrollingFrame = shopGui.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then
        warn("ScrollingFrame not found in "..shopName)
        return false
    end

    local boughtAnything = false

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") then
            local mainFrame = frame:FindFirstChild("Main_Frame")
            if not mainFrame then continue end

            local stockText = mainFrame:FindFirstChild("Stock_Text")
            if not stockText or stockText.Text == "X0 Stock" then continue end

            local stockNum = tonumber(stockText.Text:match("X(%d+)"))
            if not stockNum or stockNum <= 0 then continue end

            -- Improved image detection
            local itemImage
            if shopName == "Gear_Shop" then
                itemImage = mainFrame:FindFirstChild("Gear_Image")
            else -- For Seed_Shop and PetShop_UI
                local canvasGroup = mainFrame:FindFirstChild("CanvasGroup")
                if canvasGroup then
                    itemImage = canvasGroup:FindFirstChild("ShopItem_Image")
                end
            end

            for i = 1, stockNum do
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild(buyEventName):FireServer(frame.Name)
                end)
                if not success then
                    warn("Failed to buy "..frame.Name..": "..err)
                    break
                end
                task.wait(0.1)
            end

            sendNotification(
                "Bought "..stockNum.." "..itemType, 
                frame.Name, 
                5, 
                itemImage and itemImage.Image or nil
            )
            boughtAnything = true
        end
    end
    return boughtAnything
end
local function autoBuySeeds() return autoBuyFromShop("Seed_Shop", "BuySeedStock", "seeds") end
local function autoBuyGear() return autoBuyFromShop("Gear_Shop", "BuyGearStock", "gear") end
local function autoBuyEggs() return autoBuyFromShop("PetShop_UI", "BuyPetEgg", "eggs") end

local autoBuyActive = false
local buyLoop = nil

local function stopBuyLoop()
    if buyLoop then
        coroutine.close(buyLoop)
        buyLoop = nil
    end
    autoBuyActive = false
end

local function runFullAutoBuyLoop()
    while autoBuyActive do
        local boughtAnything = false
        
        boughtAnything = autoBuySeeds() or boughtAnything
        task.wait(1)
        
        boughtAnything = autoBuyGear() or boughtAnything
        task.wait(1)
        
        boughtAnything = autoBuyEggs() or boughtAnything
        
        if boughtAnything then
            task.wait(5)
        else
            task.wait(60)
        end
    end
end

-- UI Elements
tab:CreateToggle("Anti Collect Fruits", function(a)
    if a then
        managePrompts(true)
        sendNotification("Farm Protection", "Enabled fruit protection", 3)
    else
        managePrompts(false)
        sendNotification("Farm Protection", "Disabled fruit protection", 3)
    end
end)

tab3:CreateButton("Sell All Fruits", function()
    simulateClick(804, 106)
    task.wait(0.2)
    fireproximityprompt(workspace.NPCS.Steven.HumanoidRootPart.ProximityPrompt)
    task.wait(2)
    simulateClick(724, 366)
    sendNotification("Auto-Sell", "Sold all fruits!", 3)
end)

tab2:CreateToggle("Auto Buy Seed/Gear/Egg", function(a)
    autoBuyActive = a
    if a then
        stopBuyLoop()
        buyLoop = coroutine.create(runFullAutoBuyLoop)
        coroutine.resume(buyLoop)
        sendNotification("Auto-Buy", "Started shopping loop", 3)
    else
        stopBuyLoop()
        sendNotification("Auto-Buy", "Stopped shopping loop", 3)
    end
end)

tab2:CreateToggle("Auto Dinosaur Egg", function(a)
    sendNotification("Dino Egg", a and "Enabled" or "Disabled", 3)
end)

tab3:CreateButton("Sprinker Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Phynomie/tg/refs/heads/main/script.lua"))()
    sendNotification("Script", "Loaded sprinkler system", 3)
end)

-- Initialize
task.spawn(function()
    playerFarm = findPlayerFarm()
end)

tab:Show()
