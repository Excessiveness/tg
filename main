local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Phynomie/growagarden/main/Library"))()
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local Main = library:CreateWindow("Grow a garden script (Creds to Phy)","Crimson")

local tab = Main:CreateTab("Exploits")
local tab2 = Main:CreateTab("Automation")
local tab3 = Main:CreateTab("Misc")

-- Farm protection system
local savedPrompts = {}
local playerFarm = nil

local function findPlayerFarm()
    local username = LocalPlayer.Name
    local farms = workspace:FindFirstChild("Farm")
    
    if not farms then
        warn("Farm system not found in workspace")
        return nil
    end

    for _, farmFolder in ipairs(farms:GetDescendants()) do
        if farmFolder.Name == "Owner" and farmFolder:IsA("StringValue") and farmFolder.Value == username then
            print("Found Your Farm! " .. username)
            return farmFolder.Parent.Parent.Parent -- Adjust path based on actual hierarchy
        end
    end
    
    warn("Could not find farm belonging to: " .. username)
    return nil
end

local function managePrompts(enable)
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return end
    end

    for _, prompt in ipairs(playerFarm:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") then
            local isEggORCratePrompt = false
            local current = prompt.Parent
            while current ~= nil and current ~= playerFarm do
                if current.Name == "PetEgg" or current.Name == "CosmeticCrate" then
                    isEggORCratePrompt = true
                    break
                end
                current = current.Parent
            end
            
            if not isEggORCratePrompt then
                if enable then
                    if not savedPrompts[prompt] then
                        savedPrompts[prompt] = {
                            Enabled = prompt.Enabled,
                            HoldDuration = prompt.HoldDuration,
                            ActionText = prompt.ActionText
                        }
                    end
                    prompt.Enabled = false
                    prompt.HoldDuration = math.huge
                    prompt.ActionText = "Disabled"
                else
                    if savedPrompts[prompt] then
                        prompt.Enabled = savedPrompts[prompt].Enabled
                        prompt.HoldDuration = savedPrompts[prompt].HoldDuration
                        prompt.ActionText = savedPrompts[prompt].ActionText
                    end
                end
            end
        end
    end
end

local function simulateClick(x, y)
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
end

local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
        Icon = "rbxassetid://6726579484"
    })
end

local function autoBuySeeds()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local seedShop = LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
    if not seedShop then
        sendNotification("GAG Script", "Seed shop not open!")
        return
    end

    local scrollingFrame = seedShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." seeds!")
                end
            end
        end
    end
end

local function autoBuyGears()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local gearShop = LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
    if not gearShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = gearShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." gears!")
                end
            end
        end
    end
end

local function autoBuyEggs()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local eggShop = LocalPlayer.PlayerGui:FindFirstChild("PetShop_UI")
    if not eggShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = eggShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyPetEgg"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.."!")
                end
            end
        end
    end
end

local function autoBuyTM()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local TMShop = LocalPlayer.PlayerGui:FindFirstChild("TravelingMerchantShop_UI")
    if not TMShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = TMShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyTravelingMerchantShopStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.."!")
                end
            end
        end
    end
end

tab:CreateToggle("Anti Collect Fruits", function(a)
    if a then
        managePrompts(true)
    else
        managePrompts(false)
    end
end)

tab:CreateButton("Sell Equipped Fruit", function()
    local steven = workspace.NPCS:FindFirstChild("Steven")
    if not steven then
        warn("Steven NPC not found!")
        return
    end
    
    local npcHRP = steven:FindFirstChild("HumanoidRootPart")
    if not npcHRP then
        warn("Steven doesn't have HumanoidRootPart!")
        return
    end
    local playerChar = LocalPlayer.Character
    if not playerChar then
        warn("Player character not found!")
        return
    end
    
    local playerHRP = playerChar:FindFirstChild("HumanoidRootPart")
    if not playerHRP then
        warn("Player doesn't have HumanoidRootPart!")
        return
    end
    
    local originalCFrame = playerHRP.CFrame
    
    playerHRP.CFrame = npcHRP.CFrame * CFrame.new(0, 0, -3) 
    
    task.wait(0.2)
    
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Item"):FireServer()
    
    task.wait(0.2)
    
    playerHRP.CFrame = originalCFrame
end)

tab:CreateButton("Sell All Fruits", function()
    local steven = workspace.NPCS:FindFirstChild("Steven")
    if not steven then
        warn("Steven NPC not found!")
        return
    end
    
    local npcHRP = steven:FindFirstChild("HumanoidRootPart")
    if not npcHRP then
        warn("Steven doesn't have HumanoidRootPart!")
        return
    end
    local playerChar = LocalPlayer.Character
    if not playerChar then
        warn("Player character not found!")
        return
    end
    
    local playerHRP = playerChar:FindFirstChild("HumanoidRootPart")
    if not playerHRP then
        warn("Player doesn't have HumanoidRootPart!")
        return
    end
    
    local originalCFrame = playerHRP.CFrame
    
    playerHRP.CFrame = npcHRP.CFrame * CFrame.new(0, 0, -3) 
    
    task.wait(0.2)
    
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    
    task.wait(0.2)
    
    playerHRP.CFrame = originalCFrame
end)

local autoBuyActive = false
local buyLoop = nil

local function stopBuyLoop()
    if buyLoop then
        coroutine.close(buyLoop)
        buyLoop = nil
    end
    autoBuyActive = false
end

local countdownGui = Instance.new("ScreenGui")
countdownGui.Name = "AutoBuyCountdown"
countdownGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 50)
frame.Position = UDim2.new(0.095, 0, 0.59, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BackgroundTransparency = 0.5
frame.BorderSizePixel = 0
frame.Visible = false
frame.Parent = countdownGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.4, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Next Auto-Buy In:"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.Gotham
title.TextSize = 14
title.Parent = frame

local timerText = Instance.new("TextLabel")
timerText.Size = UDim2.new(1, 0, 0.6, 0)
timerText.Position = UDim2.new(0, 0, 0.4, 0)
timerText.BackgroundTransparency = 1
timerText.Text = "60s"
timerText.TextColor3 = Color3.fromRGB(255, 255, 255)
timerText.Font = Enum.Font.GothamBold
timerText.TextSize = 18
timerText.Parent = frame

local progressBar = Instance.new("Frame")
progressBar.Size = UDim2.new(1, 0, 0, 3)
progressBar.Position = UDim2.new(0, 0, 1, -3)
progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
progressBar.BorderSizePixel = 0
progressBar.Parent = frame

local progressFill = Instance.new("Frame")
progressFill.Size = UDim2.new(1, 0, 1, 0)
progressFill.Position = UDim2.new(0, 0, 0, 0)
progressFill.BackgroundColor3 = Color3.fromRGB(220, 20, 60) -- Crimson
progressFill.BorderSizePixel = 0
progressFill.Parent = progressBar

local function startBuyLoop()
    buyLoop = coroutine.create(function()
        while autoBuyActive do
            frame.Visible = true
            
            autoBuySeeds()
            autoBuyGears()
            autoBuyEggs()
            autoBuyTM()
            
            for i = 60, 1, -1 do
                if not autoBuyActive then break end
                
                timerText.Text = i.."s"
                progressFill.Size = UDim2.new(i/60, 0, 1, 0)
                
                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(progressFill, tweenInfo, {Size = UDim2.new((i-1)/60, 0, 1, 0)})
                tween:Play()
                
                task.wait(1)
            end
            
            if not autoBuyActive then
                frame.Visible = false
            end
        end
        stopBuyLoop()
    end)
    coroutine.resume(buyLoop)
end

tab2:CreateToggle("Auto Buy Seed/Gear/Egg/TM/", function(a)
    autoBuyActive = a
    
    if a then
        if not buyLoop then
            startBuyLoop()
        end
    else
        frame.Visible = false
        stopBuyLoop()
    end
end)

local function getPlayerPets()
    local pets = {}

    -- Check backpack pets
    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
        local ageMatch = item.Name:match("%[Age (%d+)%]")
        local weightMatch = item.Name:match("%[(%d+%.?%d*) KG%]")
        local petType = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "") -- Clean trailing spaces
        
        if ageMatch and weightMatch and petType ~= "" then
            local petString = string.format("%s [%s KG] [Age %s]", petType, weightMatch, ageMatch)
            table.insert(pets, petString)
            print("Backpack pet:", petString)
        end
    end

    -- Check pets in hand (workspace.LocalPlayer)
    local handPet = workspace:FindFirstChild(LocalPlayer.Name)
    if handPet then
        for _, item in ipairs(handPet:GetChildren()) do
            local ageMatch = item.Name:match("%[Age (%d+)%]")
            local weightMatch = item.Name:match("%[(%d+%.?%d*) KG%]")
            local petType = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
            
            if ageMatch and weightMatch and petType ~= "" then
                local petString = string.format("%s [%s KG] [Age %s]", petType, weightMatch, ageMatch)
                table.insert(pets, petString)
                print("Hand pet:", petString)
            end
        end
    end

    -- Check UI pets
    local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
    if activePetUI then
        local scrollingFrame = activePetUI.Frame.Main.ScrollingFrame
        if scrollingFrame then
            for _, child in ipairs(scrollingFrame:GetChildren()) do
                if child:IsA("Frame") and child.Name ~= "PetTemplate" then
                    local petType = child:FindFirstChild("PET_TYPE") and child.PET_TYPE.Text
                    local petAge = child:FindFirstChild("PET_AGE") and child.PET_AGE.Text or "0"
                    
                    if petType then
                        local petString = string.format("%s [%s]", petType, petAge)
                        table.insert(pets, petString)
                    end
                end
            end
        end
    end

    return pets
end

-- Helper function to find text in descendants
local function findTextInDescendants(parent, name)
    local element = parent:FindFirstChild(name, true) -- recursive search
    if element then
        return element:FindFirstChildOfClass("TextLabel") and element.TextLabel.Text
             or element:FindFirstChild("Text") and element.Text.Text
             or element:IsA("TextLabel") and element.Text
             or nil
    end
    return nil
end

local dinoEggToggle = nil
local dinosaurEggDropdown = nil
local selectedPets = {}
local dinoCountdownGui = nil
local dinoFrame = nil
local dinoTimerText = nil
local dinoProgressFill = nil

local function createDinoCountdownGui()
    if dinoCountdownGui then dinoCountdownGui:Destroy() end
    
    dinoCountdownGui = Instance.new("ScreenGui")
    dinoCountdownGui.Name = "AutoDinoCountdown"
    dinoCountdownGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    dinoFrame = Instance.new("Frame")
    dinoFrame.Size = UDim2.new(0, 200, 0, 50)
    dinoFrame.Position = UDim2.new(0.095, 0, 0.65, 0) -- Positioned below AutoBuy
    dinoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    dinoFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dinoFrame.BackgroundTransparency = 0.5
    dinoFrame.BorderSizePixel = 0
    dinoFrame.Visible = false
    dinoFrame.Parent = dinoCountdownGui

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0.4, 0)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Next Dino Sacrifice In:"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.Gotham
    title.TextSize = 14
    title.Parent = dinoFrame

    dinoTimerText = Instance.new("TextLabel")
    dinoTimerText.Size = UDim2.new(1, 0, 0.6, 0)
    dinoTimerText.Position = UDim2.new(0, 0, 0.4, 0)
    dinoTimerText.BackgroundTransparency = 1
    dinoTimerText.Text = "60s"
    dinoTimerText.TextColor3 = Color3.fromRGB(255, 255, 255)
    dinoTimerText.Font = Enum.Font.GothamBold
    dinoTimerText.TextSize = 18
    dinoTimerText.Parent = dinoFrame

    local progressBar = Instance.new("Frame")
    progressBar.Size = UDim2.new(1, 0, 0, 3)
    progressBar.Position = UDim2.new(0, 0, 1, -3)
    progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    progressBar.BorderSizePixel = 0
    progressBar.Parent = dinoFrame

    dinoProgressFill = Instance.new("Frame")
    dinoProgressFill.Size = UDim2.new(1, 0, 1, 0)
    dinoProgressFill.Position = UDim2.new(0, 0, 0, 0)
    dinoProgressFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255) -- Different color
    dinoProgressFill.BorderSizePixel = 0
    dinoProgressFill.Parent = progressBar
end

local function petExists(petString)
    -- Extract pet type and age from the string
    local petType = petString:match("^(.+) %[")
    local petAge = petString:match("%[Age (%d+)%]") or "0"
    
    -- Check backpack pets
    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
        local ageMatch = item.Name:match("%[Age (%d+)%]")
        local petTypeMatch = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
        
        if ageMatch and petTypeMatch == petType and ageMatch == petAge then
            return true
        end
    end
    
    -- Check hand pets
    local handPet = workspace:FindFirstChild(LocalPlayer.Name)
    if handPet then
        for _, item in ipairs(handPet:GetChildren()) do
            local ageMatch = item.Name:match("%[Age (%d+)%]")
            local petTypeMatch = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
            
            if ageMatch and petTypeMatch == petType and ageMatch == petAge then
                return true
            end
        end
    end
    
    -- Check UI pets
    local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
    if activePetUI then
        local scrollingFrame = activePetUI.Frame.Main.ScrollingFrame
        if scrollingFrame then
            for _, child in ipairs(scrollingFrame:GetChildren()) do
                if child:IsA("Frame") and child.Name ~= "PetTemplate" then
                    local uiPetType = child:FindFirstChild("PET_TYPE") and child.PET_TYPE.Text
                    local uiPetAge = child:FindFirstChild("PET_AGE") and child.PET_AGE.Text or "0"
                    
                    if uiPetType == petType and uiPetAge == petAge then
                        return true
                    end
                end
            end
        end
    end
    
    return false
end

-- Function to update the dropdown options
local function updateDinoDropdown()
    if not dinosaurEggDropdown then return end
    
    local currentPets = getPlayerPets()
    local newOptions = {}
    local toRemove = {}
    
    -- Check which selected pets still exist
    for petString, _ in pairs(selectedPets) do
        if not petExists(petString) then
            table.insert(toRemove, petString)
        end
    end
    
    -- Remove non-existent pets
    for _, petString in ipairs(toRemove) do
        selectedPets[petString] = nil
    end
    
    -- Update dropdown with current pets
    dinosaurEggDropdown:Refresh(currentPets, function(option)
        return selectedPets[option] ~= nil
    end)
end

local function equipPet(petInstance)
    print("[DEBUG] Starting equipPet function")
    print("[DEBUG] Pet instance:", petInstance and petInstance.Name or "nil")
    
    -- First try the simple way (parenting to character)
    if petInstance and petInstance:IsA("Tool") then
        print("[DEBUG] Pet is valid Tool")
        
        -- Check if already in hand
        if petInstance.Parent == workspace[LocalPlayer.Name] then
            print("[DEBUG] Pet already in hand, no need to equip")
            return true
        end
        
        -- Unequip current pet if any
        local currentPet = workspace[LocalPlayer.Name]:FindFirstChildOfClass("Tool")
        if currentPet then
            print("[DEBUG] Unequipping current pet:", currentPet.Name)
            currentPet.Parent = LocalPlayer.Backpack
            task.wait(0.3)
        else
            print("[DEBUG] No pet currently equipped")
        end
        
        -- Equip new pet
        print("[DEBUG] Equipping pet by parenting:", petInstance.Name)
        petInstance.Parent = workspace[LocalPlayer.Name]
        task.wait(0.5)
        
        -- Verify equip success
        if petInstance.Parent == workspace[LocalPlayer.Name] then
            print("[DEBUG] Successfully equipped pet via parenting")
            return true
        else
            print("[DEBUG] Failed to equip pet via parenting")
        end
    else
        print("[DEBUG] Pet is not a Tool or is nil")
    end
    
    -- If simple method fails, try using game's equip system
    print("[DEBUG] Attempting to use game's equip system")
    local petsService = ReplicatedStorage:FindFirstChild("GameEvents"):FindFirstChild("PetsService")
    if petsService then
        print("[DEBUG] Found PetsService")
        local petUUID = petInstance:GetAttribute("UUID") or petInstance.Name
        print("[DEBUG] Firing EquipPet with UUID:", petUUID)
        petsService:FireServer("EquipPet", petUUID)
        task.wait(0.5)
        
        -- Verify equip success
        if petInstance.Parent == workspace[LocalPlayer.Name] then
            print("[DEBUG] Successfully equipped pet via PetsService")
            return true
        else
            print("[DEBUG] Failed to equip pet via PetsService")
        end
    else
        print("[DEBUG] PetsService not found")
    end
    
    print("[DEBUG] All equip methods failed")
    return false
end

local function sacrificePet(petString)
    print("\n[DEBUG] ===== STARTING SACRIFICE PROCESS =====")
    print("[DEBUG] Attempting to sacrifice pet:", petString)
    
    -- Check machine status first
    print("[DEBUG] Looking for Dino Machine...")
    local machine = workspace:FindFirstChild("DinoEvent")
    if not machine then
        print("[DEBUG] ERROR: Dino Machine not found in workspace")
        sendNotification("GAG Script", "Dino Machine not found!", 5)
        return false
    end
    print("[DEBUG] Found Dino Machine")
    
    -- Get machine UI status
    print("[DEBUG] Locating machine UI components...")
    local benchReward = machine:FindFirstChild("BenchRewardPart", true)
    local benchPart = benchReward and benchReward:FindFirstChild("BenchPart", true)
    local billboardPart = benchPart and benchPart:FindFirstChild("BillboardPart", true)
    local billboardGui = billboardPart and billboardPart:FindFirstChild("BillboardGui", true)
    local billboard = billboardGui and billboardGui:FindFirstChild("DnaMachineLabel", true)
    
    if not billboard then
        print("[DEBUG] ERROR: Could not find all machine UI components")
        sendNotification("GAG Script", "Dino Machine UI not found!", 5)
        return false
    end
    print("[DEBUG] Machine UI found. Current state:", billboard.Text)

    -- Handle ready state
    if billboard.Text == "READY" then
        print("[DEBUG] Machine is READY - claiming reward")
        local args = {"ClaimReward"}
        local success, err = pcall(function()
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("DinoMachineService_RE"):FireServer(unpack(args))
        end)
        
        if success then
            print("[DEBUG] Successfully claimed reward")
        else
            print("[DEBUG] ERROR claiming reward:", err)
        end
        return success
    elseif billboard.Text ~= "Trade Pets for Dinos" then
        print("[DEBUG] Machine not in correct state for sacrificing")
        sendNotification("GAG Script", "Machine not ready. State: "..billboard.Text, 3)
        return false
    end

    -- Find and equip the pet
    local petType = petString:match("^(.+) %[") or "UNKNOWN_TYPE"
    local petAge = petString:match("%[Age (%d+)%]") or "0"
    print("[DEBUG] Looking for pet:", petType, "Age:", petAge)
    
    -- Search in hand first
    print("[DEBUG] Checking for pet in hand...")
    local petInstance
    local character = workspace[LocalPlayer.Name]
    if character then
        for _, item in ipairs(character:GetChildren()) do
            if item:IsA("Tool") then
                print("[DEBUG] Found tool in hand:", item.Name)
                if item.Name:match(petType) and item.Name:match("Age "..petAge) then
                    petInstance = item
                    print("[DEBUG] Found matching pet in hand")
                    break
                end
            end
        end
    end
    
    -- Search in backpack if not found
    if not petInstance then
        print("[DEBUG] Pet not in hand, checking backpack...")
        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if item:IsA("Tool") then
                print("[DEBUG] Found tool in backpack:", item.Name)
                if item.Name:match(petType) and item.Name:match("Age "..petAge) then
                    petInstance = item
                    print("[DEBUG] Found matching pet in backpack")
                    break
                end
            end
        end
    end

    if not petInstance then
        print("[DEBUG] ERROR: Could not find specified pet")
        sendNotification("GAG Script", "Pet not found: "..petString, 5)
        return false
    end
    print("[DEBUG] Pet found:", petInstance.Name)

    -- Ensure pet is in hand
    print("[DEBUG] Attempting to equip pet...")
    if not equipPet(petInstance) then
        print("[DEBUG] ERROR: Failed to equip pet")
        sendNotification("GAG Script", "Failed to equip pet!", 3)
        return false
    end
    print("[DEBUG] Pet successfully equipped")

    -- Disable favorite if needed
    if petInstance:GetAttribute("d") == true then
        print("[DEBUG] Pet is favorited - removing favorite status")
        petInstance:SetAttribute("d", false)
        task.wait(0.3)
    else
        print("[DEBUG] Pet is not favorited")
    end

    -- Sacrifice to machine
    print("[DEBUG] Attempting to sacrifice pet...")
    local args = {"MachineInteract"}
    local success, err = pcall(function()
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("DinoMachineService_RE"):FireServer(unpack(args))
    end)
    
    if success then
        print("[DEBUG] Sacrifice successful!")
    else
        print("[DEBUG] ERROR during sacrifice:", err)
    end
    
    task.wait(1) -- Important cooldown
    print("[DEBUG] Sacrifice process complete")
    return success
end

local function getPetUniqueId(petInstance)
    return petInstance:GetAttribute("UUID") or petInstance.Name
end

local function getDinoMachine()
    local machine = workspace:FindFirstChild("DinoEvent")
    if not machine then return nil end
    
    local billboard = machine:FindFirstChild("BenchRewardPart", true)
                      and machine.BenchRewardPart:FindFirstChild("BenchPart", true)
                      and machine.BenchRewardPart.BenchPart:FindFirstChild("BillboardPart", true)
                      and machine.BenchRewardPart.BenchPart.BillboardPart:FindFirstChild("BillboardGui", true)
                      and machine.BenchRewardPart.BenchPart.BillboardPart.BillboardGui:FindFirstChild("DnaMachineLabel", true)
    
    return machine, billboard
end

-- Main Dino Egg loop
local dinoLoop = nil
local function startDinoLoop()
    if dinoLoop and coroutine.status(dinoLoop) == "running" then
        coroutine.close(dinoLoop)
    end
    
    dinoLoop = coroutine.create(function()
        while dinoEggToggle and dinoEggToggle.Value do
            local machine, billboard = getDinoMachine()
            if not machine or not billboard then
                dinoTimerText.Text = "Machine not found"
                task.wait(5)
                continue
            end
            
            -- Try all selected pets until one works
            local sacrificed = false
            for petString, _ in pairs(selectedPets) do
                if not (dinoEggToggle and dinoEggToggle.Value) then break end
                
                -- Show countdown
                dinoFrame.Visible = true
                dinoTimerText.Text = "Trying to sacrifice..."
                dinoProgressFill.Size = UDim2.new(1, 0, 1, 0)
                
                -- Try to sacrifice the pet
                local success = sacrificePet(petString)
                
                if success then
                    -- Remove the sacrificed pet from selection
                    selectedPets[petString] = nil
                    sacrificed = true
                    
                    -- Countdown for next sacrifice
                    for i = 30, 1, -1 do -- 30 second cooldown
                        if not dinoEggToggle or not dinoEggToggle.Value then break end
                        
                        dinoTimerText.Text = i.."s"
                        dinoProgressFill.Size = UDim2.new(i/30, 0, 1, 0)
                        
                        local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                        local tween = TweenService:Create(dinoProgressFill, tweenInfo, {Size = UDim2.new((i-1)/30, 0, 1, 0)})
                        tween:Play()
                        
                        task.wait(1)
                    end
                    break
                end
            end
            
            if not sacrificed then
                -- If failed to sacrifice any pet, wait 5 seconds before retry
                for i = 5, 1, -1 do
                    if not dinoEggToggle or not dinoEggToggle.Value then break end
                    
                    dinoTimerText.Text = "Retry in "..i.."s"
                    dinoProgressFill.Size = UDim2.new(i/5, 0, 1, 0)
                    
                    local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                    local tween = TweenService:Create(dinoProgressFill, tweenInfo, {Size = UDim2.new((i-1)/5, 0, 1, 0)})
                    tween:Play()
                    
                    task.wait(1)
                end
            end
            
            if not dinoEggToggle or not dinoEggToggle.Value then
                dinoFrame.Visible = false
            end
        end
        
        -- Clean up
        if dinoFrame then dinoFrame.Visible = false end
        dinoLoop = nil
    end)
    
    coroutine.resume(dinoLoop)
end

dinoEggToggle = tab2:CreateToggle("Auto Dinosaur Egg", function(a)
    print("\n[DEBUG] Dino Egg Toggle:", a)
    if a then
        print("[DEBUG] Initializing Dino Egg automation")
        -- Create countdown GUI
        createDinoCountdownGui()
        
        -- Get player's current pets
        local playerPets = getPlayerPets()
        print("[DEBUG] Found", #playerPets, "pets in inventory")
        
        if #playerPets == 0 then
            print("[DEBUG] No pets found - disabling toggle")
            sendNotification("GAG Script", "No pets found in your inventory!", 5)
            dinoEggToggle:Set(false)
            return
        end
        
        -- Create the dropdown
        print("[DEBUG] Creating pet selection dropdown")
        dinosaurEggDropdown = tab2:CreateDD("Select Pets for Dinosaur Machine", 
            playerPets, 
            function(selected)
                print("[DEBUG] Pet selection changed:", selected)
                if selectedPets[selected] then
                    selectedPets[selected] = nil
                    print("[DEBUG] Deselected pet:", selected)
                else
                    selectedPets[selected] = true
                    print("[DEBUG] Selected pet:", selected)
                end
                
                -- Update the display immediately
                updateDinoDropdown()
                
                -- Start the loop immediately when pets are selected
                if next(selectedPets) ~= nil then
                    print("[DEBUG] Starting sacrifice loop with", table.count(selectedPets), "selected pets")
                    if not dinoLoop or coroutine.status(dinoLoop) == "dead" then
                        startDinoLoop()
                    end
                else
                    print("[DEBUG] No pets selected")
                end
            end)
        
        sendNotification("GAG Script", "Please select pets to sacrifice from the dropdown", 5)
    else
        print("[DEBUG] Cleaning up Dino Egg automation")
        -- Clean up when toggled off
        if dinosaurEggDropdown then
            dinosaurEggDropdown:Destroy()
            dinosaurEggDropdown = nil
            print("[DEBUG] Destroyed dropdown")
        end
        
        if dinoCountdownGui then
            dinoCountdownGui:Destroy()
            dinoCountdownGui = nil
            dinoFrame = nil
            dinoTimerText = nil
            dinoProgressFill = nil
            print("[DEBUG] Destroyed countdown GUI")
        end
        
        -- Clear selected pets when toggled off
        selectedPets = {}
        print("[DEBUG] Cleared selected pets")
        
        -- Stop any running loop
        if dinoLoop then
            coroutine.close(dinoLoop)
            dinoLoop = nil
            print("[DEBUG] Stopped sacrifice loop")
        end
    end
end)

tab3:CreateButton("Sprinker Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Phynomie/tg/refs/heads/main/script.lua"))()
end)

task.spawn(function()
    playerFarm = findPlayerFarm()
end)

tab:Show()

task.spawn(function()
    while task.wait(5) do
        if dinosaurEggDropdown and dinoEggToggle and dinoEggToggle.Value then
            updateDinoDropdown()
            
            -- If we have selected pets but loop isn't running, start it
            if next(selectedPets) ~= nil and not dinoLoop then
                startDinoLoop()
            end
        end
    end
end)
