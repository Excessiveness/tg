local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Phynomie/growagarden/main/Library"))()
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local Main = library:CreateWindow("Grow a garden script (Creds to Phy)","Crimson")

local tab = Main:CreateTab("Exploits")
local tab2 = Main:CreateTab("Automation")
local tab3 = Main:CreateTab("Misc")

-- Farm protection system
local savedPrompts = {}
local playerFarm = nil

local function findPlayerFarm()
    local username = LocalPlayer.Name
    local farms = workspace:FindFirstChild("Farm")
    
    if not farms then
        warn("Farm system not found in workspace")
        return nil
    end

    for _, farmFolder in ipairs(farms:GetDescendants()) do
        if farmFolder.Name == "Owner" and farmFolder:IsA("StringValue") and farmFolder.Value == username then
            print("Found Your Farm! " .. username)
            return farmFolder.Parent.Parent.Parent -- Adjust path based on actual hierarchy
        end
    end
    
    warn("Could not find farm belonging to: " .. username)
    return nil
end

local function managePrompts(enable)
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return end
    end

    for _, prompt in ipairs(playerFarm:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") then
            local isEggORCratePrompt = false
            local current = prompt.Parent
            while current ~= nil and current ~= playerFarm do
                if current.Name == "PetEgg" or current.Name == "CosmeticCrate" then
                    isEggORCratePrompt = true
                    break
                end
                current = current.Parent
            end
            
            if not isEggORCratePrompt then
                if enable then
                    if not savedPrompts[prompt] then
                        savedPrompts[prompt] = {
                            Enabled = prompt.Enabled,
                            HoldDuration = prompt.HoldDuration,
                            ActionText = prompt.ActionText
                        }
                    end
                    prompt.Enabled = false
                    prompt.HoldDuration = math.huge
                    prompt.ActionText = "Disabled"
                else
                    if savedPrompts[prompt] then
                        prompt.Enabled = savedPrompts[prompt].Enabled
                        prompt.HoldDuration = savedPrompts[prompt].HoldDuration
                        prompt.ActionText = savedPrompts[prompt].ActionText
                    end
                end
            end
        end
    end
end

local function simulateClick(x, y)
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
end

local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
        Icon = "rbxassetid://6726579484"
    })
end

local function autoBuySeeds()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local seedShop = LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
    if not seedShop then
        sendNotification("GAG Script", "Seed shop not open!")
        return
    end

    local scrollingFrame = seedShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." seeds!")
                end
            end
        end
    end
end

local function autoBuyGears()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local gearShop = LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
    if not gearShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = gearShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." gears!")
                end
            end
        end
    end
end

local function autoBuyEggs()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local eggShop = LocalPlayer.PlayerGui:FindFirstChild("PetShop_UI")
    if not eggShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = eggShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyPetEgg"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.."!")
                end
            end
        end
    end
end

local function autoBuyTM()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 1000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 1B sheckles!")
        return
    end

    local TMShop = LocalPlayer.PlayerGui:FindFirstChild("TravelingMerchantShop_UI")
    if not TMShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = TMShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyTravelingMerchantShopStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.."!")
                end
            end
        end
    end
end

tab:CreateToggle("Anti Collect Fruits", function(a)
    if a then
        managePrompts(true)
    else
        managePrompts(false)
    end
end)

tab:CreateButton("Sell Equipped Fruit", function()
    local steven = workspace.NPCS:FindFirstChild("Steven")
    if not steven then
        warn("Steven NPC not found!")
        return
    end
    
    local npcHRP = steven:FindFirstChild("HumanoidRootPart")
    if not npcHRP then
        warn("Steven doesn't have HumanoidRootPart!")
        return
    end
    local playerChar = LocalPlayer.Character
    if not playerChar then
        warn("Player character not found!")
        return
    end
    
    local playerHRP = playerChar:FindFirstChild("HumanoidRootPart")
    if not playerHRP then
        warn("Player doesn't have HumanoidRootPart!")
        return
    end
    
    local originalCFrame = playerHRP.CFrame
    
    playerHRP.CFrame = npcHRP.CFrame * CFrame.new(0, 0, -3) 
    
    task.wait(0.2)
    
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Item"):FireServer()
    
    task.wait(0.2)
    
    playerHRP.CFrame = originalCFrame
end)

tab:CreateButton("Sell All Fruits", function()
    local steven = workspace.NPCS:FindFirstChild("Steven")
    if not steven then
        warn("Steven NPC not found!")
        return
    end
    
    local npcHRP = steven:FindFirstChild("HumanoidRootPart")
    if not npcHRP then
        warn("Steven doesn't have HumanoidRootPart!")
        return
    end
    local playerChar = LocalPlayer.Character
    if not playerChar then
        warn("Player character not found!")
        return
    end
    
    local playerHRP = playerChar:FindFirstChild("HumanoidRootPart")
    if not playerHRP then
        warn("Player doesn't have HumanoidRootPart!")
        return
    end
    
    local originalCFrame = playerHRP.CFrame
    
    playerHRP.CFrame = npcHRP.CFrame * CFrame.new(0, 0, -3) 
    
    task.wait(0.2)
    
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    
    task.wait(0.2)
    
    playerHRP.CFrame = originalCFrame
end)

local autoBuyActive = false
local buyLoop = nil

local function stopBuyLoop()
    if buyLoop then
        coroutine.close(buyLoop)
        buyLoop = nil
    end
    autoBuyActive = false
end

local countdownGui = Instance.new("ScreenGui")
countdownGui.Name = "AutoBuyCountdown"
countdownGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 50)
frame.Position = UDim2.new(0.095, 0, 0.59, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BackgroundTransparency = 0.5
frame.BorderSizePixel = 0
frame.Visible = false
frame.Parent = countdownGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.4, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Next Auto-Buy In:"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.Gotham
title.TextSize = 14
title.Parent = frame

local timerText = Instance.new("TextLabel")
timerText.Size = UDim2.new(1, 0, 0.6, 0)
timerText.Position = UDim2.new(0, 0, 0.4, 0)
timerText.BackgroundTransparency = 1
timerText.Text = "60s"
timerText.TextColor3 = Color3.fromRGB(255, 255, 255)
timerText.Font = Enum.Font.GothamBold
timerText.TextSize = 18
timerText.Parent = frame

local progressBar = Instance.new("Frame")
progressBar.Size = UDim2.new(1, 0, 0, 3)
progressBar.Position = UDim2.new(0, 0, 1, -3)
progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
progressBar.BorderSizePixel = 0
progressBar.Parent = frame

local progressFill = Instance.new("Frame")
progressFill.Size = UDim2.new(1, 0, 1, 0)
progressFill.Position = UDim2.new(0, 0, 0, 0)
progressFill.BackgroundColor3 = Color3.fromRGB(220, 20, 60) -- Crimson
progressFill.BorderSizePixel = 0
progressFill.Parent = progressBar

local function startBuyLoop()
    buyLoop = coroutine.create(function()
        while autoBuyActive do
            frame.Visible = true
            
            autoBuySeeds()
            autoBuyGears()
            autoBuyEggs()
            autoBuyTM()
            
            for i = 60, 1, -1 do
                if not autoBuyActive then break end
                
                timerText.Text = i.."s"
                progressFill.Size = UDim2.new(i/60, 0, 1, 0)
                
                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(progressFill, tweenInfo, {Size = UDim2.new((i-1)/60, 0, 1, 0)})
                tween:Play()
                
                task.wait(1)
            end
            
            if not autoBuyActive then
                frame.Visible = false
            end
        end
        stopBuyLoop()
    end)
    coroutine.resume(buyLoop)
end

tab2:CreateToggle("Auto Buy Seed/Gear/Egg/TM/", function(a)
    autoBuyActive = a
    
    if a then
        if not buyLoop then
            startBuyLoop()
        end
    else
        frame.Visible = false
        stopBuyLoop()
    end
end)

local function getPlayerPets()
    print("[DEBUG] Scanning for player pets...")
    local pets = {}

    -- Check backpack pets
    print("[DEBUG] Checking backpack pets...")
    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
        local ageMatch = item.Name:match("%[Age (%d+)%]")
        local weightMatch = item.Name:match("%[(%d+%.?%d*) KG%]")
        local petType = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "") -- Clean trailing spaces
        
        if ageMatch and weightMatch and petType ~= "" then
            local petString = string.format("%s [%s KG] [Age %s]", petType, weightMatch, ageMatch)
            table.insert(pets, petString)
            print("[PET FOUND] Backpack:", petString)
        end
    end

    -- Check pets in hand
    print("[DEBUG] Checking equipped pets...")
    local handPet = workspace:FindFirstChild(LocalPlayer.Name)
    if handPet then
        for _, item in ipairs(handPet:GetChildren()) do
            local ageMatch = item.Name:match("%[Age (%d+)%]")
            local weightMatch = item.Name:match("%[(%d+%.?%d*) KG%]")
            local petType = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
            
            if ageMatch and weightMatch and petType ~= "" then
                local petString = string.format("%s [%s KG] [Age %s]", petType, weightMatch, ageMatch)
                table.insert(pets, petString)
                print("[PET FOUND] Equipped:", petString)
            end
        end
    end

    -- Check UI pets
    print("[DEBUG] Checking UI pets...")
    local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
    if activePetUI then
        local scrollingFrame = activePetUI.Frame.Main.ScrollingFrame
        if scrollingFrame then
            for _, child in ipairs(scrollingFrame:GetChildren()) do
                if child:IsA("Frame") and child.Name ~= "PetTemplate" then
                    local petType = child:FindFirstChild("PET_TYPE") and child.PET_TYPE.Text
                    local petAge = child:FindFirstChild("PET_AGE") and child.PET_AGE.Text or "0"
                    
                    if petType then
                        local petString = string.format("%s [%s]", petType, petAge)
                        table.insert(pets, petString)
                        print("[PET FOUND] UI:", petString)
                    end
                end
            end
        end
    end

    print(string.format("[DEBUG] Found %d total pets", #pets))
    return pets
end

-- Helper function to find text in descendants
local function findTextInDescendants(parent, name)
    local element = parent:FindFirstChild(name, true) -- recursive search
    if element then
        return element:FindFirstChildOfClass("TextLabel") and element.TextLabel.Text
             or element:FindFirstChild("Text") and element.Text.Text
             or element:IsA("TextLabel") and element.Text
             or nil
    end
    return nil
end

local dinoEggToggle = nil
local dinosaurEggDropdown = nil
local selectedPets = {}
local dinoCountdownGui = nil
local dinoFrame = nil
local dinoTimerText = nil
local dinoProgressFill = nil

local function createDinoCountdownGui()
    if dinoCountdownGui then dinoCountdownGui:Destroy() end
    
    dinoCountdownGui = Instance.new("ScreenGui")
    dinoCountdownGui.Name = "AutoDinoCountdown"
    dinoCountdownGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    dinoFrame = Instance.new("Frame")
    dinoFrame.Size = UDim2.new(0, 200, 0, 50)
    dinoFrame.Position = UDim2.new(0.095, 0, 0.65, 0) -- Positioned below AutoBuy
    dinoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    dinoFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dinoFrame.BackgroundTransparency = 0.5
    dinoFrame.BorderSizePixel = 0
    dinoFrame.Visible = false
    dinoFrame.Parent = dinoCountdownGui

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0.4, 0)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Next Dino Sacrifice In:"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.Gotham
    title.TextSize = 14
    title.Parent = dinoFrame

    dinoTimerText = Instance.new("TextLabel")
    dinoTimerText.Size = UDim2.new(1, 0, 0.6, 0)
    dinoTimerText.Position = UDim2.new(0, 0, 0.4, 0)
    dinoTimerText.BackgroundTransparency = 1
    dinoTimerText.Text = "60s"
    dinoTimerText.TextColor3 = Color3.fromRGB(255, 255, 255)
    dinoTimerText.Font = Enum.Font.GothamBold
    dinoTimerText.TextSize = 18
    dinoTimerText.Parent = dinoFrame

    local progressBar = Instance.new("Frame")
    progressBar.Size = UDim2.new(1, 0, 0, 3)
    progressBar.Position = UDim2.new(0, 0, 1, -3)
    progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    progressBar.BorderSizePixel = 0
    progressBar.Parent = dinoFrame

    dinoProgressFill = Instance.new("Frame")
    dinoProgressFill.Size = UDim2.new(1, 0, 1, 0)
    dinoProgressFill.Position = UDim2.new(0, 0, 0, 0)
    dinoProgressFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255) -- Different color
    dinoProgressFill.BorderSizePixel = 0
    dinoProgressFill.Parent = progressBar
end

local function petExists(petString)
    if type(petString) ~= "string" then
        print("[ERROR] petExists: Expected string but got", type(petString))
        return false
    end

    print("[DEBUG] Checking pet:", petString)
    
    -- Extract pet info with safety checks
    local petType, petAge = petString:match("^(.+) %[.+%] %[Age (%d+)%]")
    if not petType or not petAge then
        -- Try alternative format for UI pets
        petType, petAge = petString:match("^(.+) %[Age (%d+)%]")
        if not petType or not petAge then
            print("[ERROR] Could not parse pet string:", petString)
            return false
        end
    end

    -- Search locations
    local locations = {
        Backpack = LocalPlayer.Backpack,
        Hand = workspace:FindFirstChild(LocalPlayer.Name)
    }

    for locationName, location in pairs(locations) do
        if location then
            for _, item in ipairs(location:GetChildren()) do
                if item:IsA("Tool") then
                    local iType, iAge = item.Name:match("^(.+) %[.+%] %[Age (%d+)%]")
                    if iType and iAge and iType:gsub("%s+$", "") == petType:gsub("%s+$", "") and iAge == petAge then
                        print("[FOUND] Pet in", locationName, ":", item.Name)
                        return true
                    end
                end
            end
        end
    end

    -- Check UI pets
    local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
    if activePetUI and activePetUI.Frame and activePetUI.Frame.Main and activePetUI.Frame.Main.ScrollingFrame then
        for _, child in ipairs(activePetUI.Frame.Main.ScrollingFrame:GetChildren()) do
            if child:IsA("Frame") and child.Name ~= "PetTemplate" then
                local uiPetType = child:FindFirstChild("PET_TYPE") and child.PET_TYPE.Text
                local uiPetAge = child:FindFirstChild("PET_AGE") and child.PET_AGE.Text or "0"
                
                if uiPetType == petType and uiPetAge == petAge then
                    print("[FOUND] Pet in UI")
                    return true
                end
            end
        end
    end

    print("[DEBUG] Pet not found")
    return false
end

local selectedPetStrings = {} -- This will store the actual string representations

local function updateDinoDropdown()
    print("[DEBUG] Updating dinosaur dropdown")
    if not dinosaurEggDropdown then 
        print("[WARNING] Dropdown reference is nil")
        return 
    end
    
    -- Get current pets and ensure they're strings
    local currentPets = {}
    for _, pet in ipairs(getPlayerPets()) do
        if type(pet) == "string" then
            table.insert(currentPets, pet)
        else
            print("[WARNING] Found non-string pet:", pet)
        end
    end
    
    print("[DEBUG] Current pets count:", #currentPets)
    
    -- Clean up selected pets that no longer exist
    local toRemove = {}
    for petString, _ in pairs(selectedPets) do
        if type(petString) ~= "string" or not petExists(petString) then
            print("[DEBUG] Removing invalid pet selection:", petString)
            table.insert(toRemove, petString)
        end
    end
    
    for _, petString in ipairs(toRemove) do
        selectedPets[petString] = nil
    end
    
    -- Update dropdown using the library's proper refresh method
    if dinosaurEggDropdown.Refresh then
        dinosaurEggDropdown:Refresh(currentPets, function(option)
            return selectedPets[option] ~= nil
        end)
        print("[DEBUG] Dropdown refreshed successfully")
    else
        print("[ERROR] Dropdown doesn't have Refresh method")
        -- Fallback: recreate the dropdown
        dinosaurEggDropdown = tab2:CreateDD("Select Pets for Dinosaur Machine", 
            currentPets,
            function(selected)
                if type(selected) == "string" then
                    if selectedPets[selected] then
                        selectedPets[selected] = nil
                    else
                        selectedPets[selected] = true
                    end
                    updateDinoDropdown()
                end
            end)
    end
end

local function createDinoDropdown()
    if dinosaurEggDropdown then
        dinosaurEggDropdown:Destroy()
    end
    
    local pets = {}
    for _, pet in ipairs(getPlayerPets()) do
        if type(pet) == "string" then
            table.insert(pets, pet)
        end
    end

    dinosaurEggDropdown = tab2:CreateDD("Select Pets for Dinosaur Machine", 
        pets,
        function(selected)
            if type(selected) == "string" then
                if selectedPets[selected] then
                    selectedPets[selected] = nil
                    print("Deselected:", selected)
                else
                    selectedPets[selected] = true
                    print("Selected:", selected)
                end
                updateDinoDropdown()
            end
        end)
end

local function sacrificePet(petString)
    print("\n[DEBUG] Attempting to sacrifice pet:", petString)
    
    -- Check machine status
    print("[DEBUG] Locating dinosaur machine...")
    local machine = workspace:FindFirstChild("DinoEvent")
    if not machine then
        print("[ERROR] Dino Machine not found!")
        sendNotification("GAG Script", "Dino Machine not found!", 5)
        return false
    end
    
    print("[DEBUG] Checking machine components...")
    local benchReward = machine:FindFirstChild("BenchRewardPart")
    if not benchReward then
        print("[ERROR] Machine parts missing!")
        sendNotification("GAG Script", "Dino Machine parts not found!", 5)
        return false
    end
    
    local billboard = benchReward:FindFirstChild("BenchPart", true):FindFirstChild("BillboardPart", true):FindFirstChild("BillboardGui", true):FindFirstChild("DnaMachineLabel", true)
    if not billboard then
        print("[ERROR] Machine UI missing!")
        sendNotification("GAG Script", "Dino Machine UI not found!", 5)
        return false
    end

    print("[DEBUG] Machine state:", billboard.Text)
    if billboard.Text ~= "Trade Pets for Dinos" then
        print("[DEBUG] Machine not ready for sacrifices")
        sendNotification("GAG Script", "AutoEggDino is ON, waiting for machine to be ready. Current state: ["..billboard.Text.."]", 5)
        return false
    end

    if billboard.Text == "READY" then
        print("[DEBUG] Claiming ready reward...")
        local args = {"ClaimReward"}
        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("DinoMachineService_RE"):FireServer(unpack(args))
        end)
    
        if not success then
            print("[ERROR] Reward claim failed:", err)
            sendNotification("GAG Script", "Failed to claim reward: "..tostring(err), 5)
            return false
        end
        print("[DEBUG] Reward claimed successfully")
        return true
    end
    
    local petType = petString:match("^(.+) %[")
    local petAge = petString:match("%[Age (%d+)%]") or "0"
    print(string.format("[DEBUG] Looking for pet: Type='%s' Age='%s'", petType, petAge))
    
    -- First check if pet is already in hand
    print("[DEBUG] Checking equipped pets...")
    local petInstance = nil
    local handPet = workspace:FindFirstChild(LocalPlayer.Name)
    if handPet then
        for _, item in ipairs(handPet:GetChildren()) do
            local ageMatch = item.Name:match("%[Age (%d+)%]")
            local petTypeMatch = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
            
            if ageMatch and petTypeMatch == petType and ageMatch == petAge then
                petInstance = item
                print("[DEBUG] Found equipped pet:", item.Name)
                break
            end
        end
    end
    
    -- If not in hand, check backpack
    if not petInstance then
        print("[DEBUG] Checking backpack...")
        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            local ageMatch = item.Name:match("%[Age (%d+)%]")
            local petTypeMatch = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
            
            if ageMatch and petTypeMatch == petType and ageMatch == petAge then
                petInstance = item
                print("[DEBUG] Found backpack pet:", item.Name)
                break
            end
        end
    end
    
    -- If not in backpack, try to unequip from UI
    if not petInstance then
        print("[DEBUG] Checking UI pets...")
        local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
        if activePetUI then
            local scrollingFrame = activePetUI.Frame.Main.ScrollingFrame
            if scrollingFrame then
                for _, child in ipairs(scrollingFrame:GetChildren()) do
                    if child:IsA("Frame") and child.Name ~= "PetTemplate" then
                        local uiPetType = child:FindFirstChild("PET_TYPE") and child.PET_TYPE.Text
                        local uiPetAge = child:FindFirstChild("PET_AGE") and child.PET_AGE.Text or "0"
                        
                        if uiPetType == petType and uiPetAge == petAge then
                            print("[DEBUG] Found UI pet - attempting to unequip...")
                            local args = {"UnequipPet", child.Name}
                            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService"):FireServer(unpack(args))
                            
                            -- Wait for pet to appear
                            local waitTime = 0
                            while waitTime < 5 do
                                -- Check hand
                                handPet = workspace:FindFirstChild(LocalPlayer.Name)
                                if handPet then
                                    for _, item in ipairs(handPet:GetChildren()) do
                                        local ageMatch = item.Name:match("%[Age (%d+)%]")
                                        local petTypeMatch = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
                                        
                                        if ageMatch and petTypeMatch == petType and ageMatch == petAge then
                                            petInstance = item
                                            print("[DEBUG] Pet appeared in hand after unequip")
                                            break
                                        end
                                    end
                                end
                                
                                -- Check backpack
                                if not petInstance then
                                    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
                                        local ageMatch = item.Name:match("%[Age (%d+)%]")
                                        local petTypeMatch = item.Name:gsub("%s*%[.+%]", ""):gsub("%s+$", "")
                                        
                                        if ageMatch and petTypeMatch == petType and ageMatch == petAge then
                                            petInstance = item
                                            print("[DEBUG] Pet appeared in backpack after unequip")
                                            break
                                        end
                                    end
                                end
                                
                                if petInstance then break end
                                waitTime = waitTime + 0.1
                                task.wait(0.1)
                            end
                            break
                        end
                    end
                end
            end
        end
    end
    
    if not petInstance then
        print("[ERROR] Could not locate pet for sacrifice")
        sendNotification("GAG Script", "Could not find pet: "..petString, 5)
        return false
    end
    
    -- Ensure pet is in hand
    if petInstance.Parent ~= workspace[LocalPlayer.Name] then
        print("[DEBUG] Moving pet to hand...")
        petInstance.Parent = workspace[LocalPlayer.Name]
        task.wait(0.5)
    end
    
    -- Handle favorite status
    if petInstance:GetAttribute("d") == true then
        print("[DEBUG] Removing favorite status...")
        petInstance:SetAttribute("d", false)
        sendNotification("GAG Script", "Disabled favorite status for: "..petString, 3)
        task.wait(0.3)
    end
    
    -- Perform sacrifice
    print("[DEBUG] Attempting sacrifice...")
    local args = {"MachineInteract"}
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("DinoMachineService_RE"):FireServer(unpack(args))
    
    task.wait(0.5)
    print("[DEBUG] Sacrifice attempt complete")
    return true
end

-- Main Dino Egg loop
local dinoLoop = nil
local function startDinoLoop()
    print("\n[DEBUG] Starting dinosaur egg loop...")
    if dinoLoop then 
        print("[DEBUG] Closing existing loop")
        coroutine.close(dinoLoop) 
    end
    
    dinoLoop = coroutine.create(function()
        while dinoEggToggle and dinoEggToggle.Value do
            print("[LOOP] Updating dropdown...")
            updateDinoDropdown()
            
            if next(selectedPets) == nil then
                print("[LOOP] No pets selected")
                sendNotification("GAG Script", "No selected pets left for Dino Machine!", 5)
                dinoFrame.Visible = false
                task.wait(5)
                continue
            end
            
            -- Get first selected pet
            local petToSacrifice = next(selectedPets)
            print("[LOOP] Attempting to sacrifice:", petToSacrifice)
            
            -- Show countdown
            dinoFrame.Visible = true
            
            local success = sacrificePet(petToSacrifice)
            
            if success then
                print("[LOOP] Sacrifice successful, removing from selection")
                selectedPets[petToSacrifice] = nil
                
                -- Countdown for next sacrifice
                for i = 30, 1, -1 do
                    if not dinoEggToggle or not dinoEggToggle.Value then break end
                    dinoTimerText.Text = i.."s"
                    dinoProgressFill.Size = UDim2.new(i/30, 0, 1, 0)
                    local tween = TweenService:Create(dinoProgressFill, TweenInfo.new(1, Enum.EasingStyle.Linear), {Size = UDim2.new((i-1)/30, 0, 1, 0)})
                    tween:Play()
                    task.wait(1)
                end
            else
                print("[LOOP] Sacrifice failed, retrying soon...")
                for i = 5, 1, -1 do
                    if not dinoEggToggle or not dinoEggToggle.Value then break end
                    dinoTimerText.Text = "Retry in "..i.."s"
                    dinoProgressFill.Size = UDim2.new(i/5, 0, 1, 0)
                    local tween = TweenService:Create(dinoProgressFill, TweenInfo.new(1, Enum.EasingStyle.Linear), {Size = UDim2.new((i-1)/5, 0, 1, 0)})
                    tween:Play()
                    task.wait(1)
                end
            end
            
            if not dinoEggToggle or not dinoEggToggle.Value then
                dinoFrame.Visible = false
            end
        end
        
        print("[DEBUG] Loop ended")
        if dinoFrame then dinoFrame.Visible = false end
        dinoLoop = nil
    end)
    
    coroutine.resume(dinoLoop)
end

dinoEggToggle = tab2:CreateToggle("Auto Dinosaur Egg", function(a)
    print("\n[DEBUG] Dino Egg Toggle:", a)
    if a then
        print("[DEBUG] Initializing Dino Egg automation")
        createDinoCountdownGui()
        
        local playerPets = getPlayerPets()
        if #playerPets == 0 then
            print("[DEBUG] No pets found - disabling")
            sendNotification("GAG Script", "No pets found in your inventory!", 5)
            dinoEggToggle:Set(false)
            return
        end
        
        print("[DEBUG] Creating pet selection dropdown")
        dinosaurEggDropdown = tab2:CreateDD("Select Pets for Dinosaur Machine", 
            playerPets, 
            function(selected)
                print("[DROPDOWN] Selection changed:", selected)
                if selectedPets[selected] then
                    selectedPets[selected] = nil
                    print("[DROPDOWN] Deselected:", selected)
                else
                    selectedPets[selected] = true
                    print("[DROPDOWN] Selected:", selected)
                end
                
                updateDinoDropdown()
                
                if dinoEggToggle and dinoEggToggle.Value and next(selectedPets) ~= nil then
                    if not dinoLoop then
                        print("[DROPDOWN] Starting sacrifice loop")
                        startDinoLoop()
                    end
                end
            end)
        
        sendNotification("GAG Script", "Please select pets to sacrifice from the dropdown", 5)
    else
        print("[DEBUG] Cleaning up Dino Egg automation")
        if dinosaurEggDropdown then
            dinosaurEggDropdown:Destroy()
            dinosaurEggDropdown = nil
            print("[DEBUG] Dropdown destroyed")
        end
        
        if dinoCountdownGui then
            dinoCountdownGui:Destroy()
            dinoCountdownGui = nil
            dinoFrame = nil
            dinoTimerText = nil
            dinoProgressFill = nil
            print("[DEBUG] GUI destroyed")
        end
        
        selectedPets = {}
        print("[DEBUG] Selection cleared")
        
        if dinoLoop then
            coroutine.close(dinoLoop)
            dinoLoop = nil
            print("[DEBUG] Loop stopped")
        end
    end
end)

tab3:CreateButton("Sprinker Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Phynomie/tg/refs/heads/main/script.lua"))()
end)

task.spawn(function()
    playerFarm = findPlayerFarm()
end)

tab:Show()

task.spawn(function()
    while task.wait(5) do
        if dinosaurEggDropdown and dinoEggToggle and dinoEggToggle.Value then
            updateDinoDropdown()
            
            -- If we have selected pets but loop isn't running, start it
            if next(selectedPets) ~= nil and not dinoLoop then
                startDinoLoop()
            end
        end
    end
end)
